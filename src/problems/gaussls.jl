gausss(x, i) = x[1] * exp(-x[2] * i) + x[3] * exp(-((i - x[4]) / x[5])^2) + 
    x[6] * exp(-((i - x[7]) / x[8])^2)

function gaussls(x, y)
    check_x_indices(x, 8; regenerate = false)
	return sumi(i -> (y[i] - gausss(x, i))^2, zero(eltype(x)), eachindex(y))
end

function gaussls_gradient(gradient, x, y)
    check_x_indices(x, 8; regenerate = false)
    check_gradient_indices(gradient, x)
	g1 = g2 = g3 = g4 = g5 = g6 = g7 = g8 = zero(eltype(x))
	@inbounds @simd for i in eachindex(y)
		e1 = exp(-x[2] * i)
		inv_x5 = 1 / x[5]
		inv_x8 = 1 / x[8]
		e2 = exp(-((i - x[4]) * inv_x5)^2)
		e3 = exp(-((i - x[7]) * inv_x8)^2)
		a = 2(y[i] - (x[1] * e1 + x[3] * e2 + x[6] * e3))
		g1 += -a * e1
		g2 += a * x[1] * e1 * i
		g3 += -a * e2
		g4 += -2a * e2 * x[3] * (i - x[4]) * inv_x5^2
		g5 += -2a * e2 * x[3] * (i - x[4])^2 * inv_x5^3
		g6 += -a * e3
		g7 += -2a * x[6] * e3 * (i - x[7]) * inv_x8^2
		g8 += -2a * x[6] * e3 * (i - x[7])^2 * inv_x8^3
	end
	gradient[1] = g1; gradient[2] = g2; gradient[3] = g3; gradient[4] = g4
	gradient[5] = g5; gradient[6] = g6; gradient[7] = g7; gradient[8] = g8
	return gradient
end

"""
NAME          GAUSS1LS

*   Problem :
*   *********

*   NIST Data fitting problem GAUSS1.

*   Fit: y = b1*exp( -b2*x ) + b3*exp( -(x-b4)**2 / b5**2 )
*                            + b6*exp( -(x-b7)**2 / b8**2 ) + e

*   Source:  Problem from the NIST nonlinear regression test set
*     http://www.itl.nist.gov/div898/strd/nls/nls_main.shtml

*   Reference: Rust, B., NIST (1996).

*   SIF input: Nick Gould and Tyrone Rees, Oct 2015

*   classification SUR2-MN-8-0
...

Keyword arguments:
; T = typeof(1.)
"""

function gen_gauss1ls(; T = typeof(1.))

	y = T[97.62227, 97.80724, 96.62247, 92.59022, 91.23869, 95.32704, 90.3504, 89.46235, 91.7252, 
	89.86916, 86.88076, 85.9436, 87.60686, 86.25839, 80.74976, 83.03551, 88.25837, 82.01316, 
	82.74098, 83.30034, 81.2785, 81.85506, 80.75195, 80.09573, 81.07633, 78.81542, 78.38596, 
	79.93386, 79.48474, 79.95942, 76.10691, 78.3983, 81.4306, 82.48867, 81.65462, 80.84323, 
	88.68663, 84.74438, 86.83934, 85.97739, 91.28509, 97.22411, 93.51733, 94.10159, 101.9176, 
	98.43134, 110.4214, 107.6628, 111.7288, 116.5115, 120.7609, 123.9553, 124.2437, 130.7996, 
	133.296, 130.7788, 132.0565, 138.6584, 142.9252, 142.7215, 144.1249, 147.4377, 148.2647, 
	152.0519, 147.3863, 149.2074, 148.9537, 144.5876, 148.1226, 148.0144, 143.8893, 140.9088, 
	143.4434, 139.3938, 135.9878, 136.3927, 126.7262, 124.4487, 122.8647, 113.8557, 113.7037, 
	106.8407, 107.0034, 102.4629, 96.09296, 94.57555, 86.98824, 84.90154, 81.18023, 76.40117, 
	67.092, 72.67155, 68.10848, 67.99088, 63.34094, 60.55253, 56.18687, 53.64482, 53.70307, 
	48.07893, 42.21258, 45.65181, 41.69728, 41.24946, 39.21349, 37.71696, 36.68395, 37.30393, 
	37.43277, 37.45012, 32.64648, 31.84347, 31.39951, 26.68912, 32.25323, 27.61008, 33.58649, 
	28.10714, 30.26428, 28.01648, 29.11021, 23.02099, 25.65091, 28.50295, 25.23701, 26.13828, 
	33.5326, 29.25195, 27.09847, 26.52999, 25.52401, 26.69218, 24.55269, 27.71763, 25.20297, 
	25.61483, 25.06893, 27.6393, 24.94851, 25.86806, 22.48183, 26.90045, 25.39919, 17.90614, 
	23.76039, 25.89689, 27.64231, 22.86101, 26.47003, 23.72888, 27.54334, 30.52683, 28.07261, 
	34.92815, 28.29194, 34.19161, 35.41207, 37.09336, 40.9833, 39.53923, 47.80123, 47.46305, 
	51.04166, 54.58065, 57.53001, 61.42089, 62.79032, 68.51455, 70.23053, 74.42776, 76.59911, 
	81.62053, 83.42208, 79.17451, 88.56985, 85.66525, 86.55502, 90.65907, 84.2729, 85.7222, 
	83.10702, 82.16884, 80.42568, 78.15692, 79.79691, 77.84378, 74.50327, 71.57289, 65.88031, 
	65.01385, 60.19582, 59.66726, 52.95478, 53.87792, 44.91274, 41.09909, 41.68018, 34.53379, 
	34.86419, 33.14787, 29.58864, 27.29462, 21.91439, 19.08159, 24.9029, 19.82341, 16.75551, 
	18.24558, 17.23549, 16.34934, 13.71285, 14.75676, 13.97169, 12.42867, 14.35519, 7.703309, 
	10.23441, 11.78315, 13.87768, 4.5357, 10.05928, 8.424824, 10.53312, 9.602255, 7.877514, 
	6.258121, 8.899865, 7.877754, 12.51191, 10.66205, 6.0354, 6.790655, 8.783535, 4.600288, 
	8.400915, 7.216561, 10.01741, 7.331278, 6.527863, 2.842001, 10.32507, 4.790995, 8.377101, 
	6.264445, 2.706213, 8.362329, 8.983658, 3.362571, 1.182746, 4.875359]

    return (x0 = T[97.0, 0.009, 100.0, 65.0, 20.0, 70.0, 178.0, 16.5],
            obj = x -> gaussls(x, y), 
            grad! = (gradient, x) -> gaussls_gradient(gradient, x, y))
end

"""
NAME          GAUSS2LS

*   Problem :
*   *********

*   NIST Data fitting problem GAUSS2.

*   Fit: y = b1*exp( -b2*x ) + b3*exp( -(x-b4)**2 / b5**2 )
*                            + b6*exp( -(x-b7)**2 / b8**2 ) + e

*   Source:  Problem from the NIST nonlinear regression test set
*     http://www.itl.nist.gov/div898/strd/nls/nls_main.shtml

*   Reference: Rust, B., NIST (1996).

*   SIF input: Nick Gould and Tyrone Rees, Oct 2015

*   classification SUR2-MN-8-0
...

Keyword arguments:
; T = typeof(1.)
"""

function gen_gauss2ls(; T = typeof(1.))

    y = T[97.58776, 97.76344, 96.56705, 92.52037, 91.15097, 95.21728, 90.21355, 89.29235, 91.51479, 
    89.60966, 86.56187, 85.55316, 87.13054, 85.6794, 80.04851, 82.18925, 87.24081, 80.79407, 
    81.2857, 81.5694, 79.22715, 79.43275, 77.90195, 76.75468, 77.17377, 74.27348, 73.119, 
    73.84826, 72.4787, 71.92292, 66.92176, 67.93835, 69.56207, 69.07066, 66.53983, 63.87883, 
    69.71537, 63.60588, 63.37154, 60.01835, 62.67481, 65.80666, 59.14304, 56.62951, 61.21785, 
    54.3879, 62.93443, 56.65144, 57.13362, 58.29689, 58.91744, 58.50172, 55.22885, 58.30375, 
    57.43237, 51.69407, 49.93132, 53.7076, 55.39712, 52.89709, 52.31649, 53.9872, 53.54158, 
    56.45046, 51.32276, 53.11676, 53.28631, 49.80555, 54.69564, 56.41627, 54.59362, 54.3852, 
    60.15354, 59.78773, 60.49995, 65.43885, 60.70001, 63.71865, 67.77139, 64.70934, 70.78193, 
    70.38651, 77.22359, 79.52665, 80.13077, 85.67823, 85.20647, 90.24548, 93.61953, 95.86509, 
    93.46992, 105.8137, 107.8269, 114.0607, 115.5019, 118.511, 119.6177, 122.194, 126.9903, 
    125.7005, 123.7447, 130.6543, 129.7168, 131.824, 131.8759, 131.9994, 132.1221, 133.4414, 
    133.8252, 133.6695, 128.2851, 126.5182, 124.755, 118.4016, 122.0334, 115.2059, 118.7856, 
    110.7387, 110.2003, 105.1729, 103.4472, 94.5428, 94.40526, 94.57964, 88.76605, 87.28747, 
    92.50443, 86.27997, 82.44307, 80.47367, 78.36608, 78.74307, 76.12786, 79.13108, 76.76062, 
    77.60769, 77.76633, 81.2822, 79.74307, 81.97964, 80.02952, 85.95232, 85.96838, 79.94789, 
    87.17023, 90.50992, 93.23373, 89.14803, 93.11492, 90.34337, 93.69421, 95.74256, 91.85105, 
    96.74503, 87.60996, 90.47012, 88.1169, 85.70673, 85.01361, 78.5304, 81.34148, 75.19295, 
    72.66115, 69.85504, 66.29476, 63.58502, 58.33847, 57.50766, 52.80498, 50.79319, 47.0349, 
    46.4709, 43.09016, 34.11531, 39.28235, 32.68386, 30.44056, 31.98932, 23.6333, 23.69643, 
    20.26812, 19.07074, 17.59544, 16.08785, 18.94267, 18.61354, 17.258, 16.62285, 13.48367, 
    15.37647, 13.47208, 15.96188, 12.32547, 16.3388, 10.43833, 9.628715, 13.12268, 8.772417, 
    11.76143, 12.5502, 11.33108, 11.20493, 7.816916, 6.800675, 14.26581, 10.66285, 8.911574, 
    11.56733, 11.58207, 11.59071, 9.730134, 11.44237, 11.22912, 10.17213, 12.50905, 6.201493, 
    9.019605, 10.80607, 13.09625, 3.914271, 9.567886, 8.038448, 10.23104, 9.36741, 7.695971, 
    6.118575, 8.793207, 7.796692, 12.45065, 10.61601, 6.001003, 6.765098, 8.764653, 4.586418, 
    8.390783, 7.209202, 10.01209, 7.327461, 6.525136, 2.840065, 10.32371, 4.790035, 8.376431, 
    6.26398, 2.705892, 8.362109, 8.983507, 3.362469, 1.182678, 4.875312]

    return (x0 = T[96, 0.009, 103, 106, 18, 72, 151, 18],
            obj = x -> gaussls(x, y), 
            grad! = (gradient, x) -> gaussls_gradient(gradient, x, y))
end

"""
NAME          GAUSS3LS

*   Problem :
*   *********

*   NIST Data fitting problem GAUSS3.

*   Fit: y = b1*exp( -b2*x ) + b3*exp( -(x-b4)**2 / b5**2 )
*                            + b6*exp( -(x-b7)**2 / b8**2 ) + e

*   Source:  Problem from the NIST nonlinear regression test set
*     http://www.itl.nist.gov/div898/strd/nls/nls_main.shtml

*   Reference: Rust, B., NIST (1996).

*   SIF input: Nick Gould and Tyrone Rees, Oct 2015

*   classification SUR2-MN-8-0
...

Keyword arguments:
; T = typeof(1.)
"""
function gen_gauss3ls(; T = typeof(1.))

    y = T[97.58776, 97.76344, 96.56705, 92.52037, 91.15097, 95.21728, 90.21355, 89.29235, 91.51479, 
    89.60965, 86.56187, 85.55315, 87.13053, 85.67938, 80.04849, 82.18922, 87.24078, 80.79401, 
    81.28564, 81.56932, 79.22703, 79.43259, 77.90174, 76.75438, 77.17338, 74.27296, 73.1183, 
    73.84732, 72.47746, 71.92128, 66.91962, 67.93554, 69.55841, 69.06592, 66.53371, 63.87094, 
    69.70526, 63.59295, 63.35509, 59.99747, 62.64843, 65.77345, 59.10141, 56.5775, 61.15313, 
    54.30767, 62.83535, 56.52957, 56.98427, 58.11459, 58.69576, 58.23322, 54.9049, 57.91442, 
    56.96629, 51.13831, 49.27123, 52.92668, 54.47693, 51.8171, 51.05401, 52.51731, 51.8371, 
    54.48196, 49.05859, 50.52315, 50.32755, 46.44419, 50.89281, 52.13203, 49.78741, 49.01637, 
    54.18198, 53.17456, 53.20827, 57.43459, 51.95282, 54.20282, 57.46687, 53.60268, 58.86728, 
    57.66652, 63.71034, 65.24244, 65.10878, 69.96313, 68.85475, 73.32574, 76.21241, 78.06311, 
    75.37701, 87.54449, 89.50588, 95.82098, 97.4839, 100.8607, 102.4851, 105.7311, 111.3489, 
    111.0305, 110.192, 118.3581, 118.8086, 122.4249, 124.0953, 125.9337, 127.8533, 131.0361, 
    133.3343, 135.1278, 131.7113, 131.9151, 132.1107, 127.6898, 133.2148, 128.2296, 133.5902, 
    127.2539, 128.3482, 124.8694, 124.6031, 117.0648, 118.1966, 119.5408, 114.7946, 114.278, 
    120.3484, 114.8647, 111.6514, 110.1826, 108.4461, 109.0571, 106.5308, 109.4691, 106.8709, 
    107.3192, 106.9, 109.6526, 107.1602, 108.2509, 104.9631, 109.3601, 107.6696, 99.77286, 
    104.9644, 106.1376, 106.5816, 100.1286, 101.6691, 96.44254, 97.34169, 96.97412, 90.7346, 
    93.37949, 82.12331, 83.01657, 78.8736, 74.86971, 72.79341, 65.14744, 67.02127, 60.16136, 
    57.13996, 54.05769, 50.42265, 47.8243, 42.85748, 42.45495, 38.30808, 36.95794, 33.94543, 
    34.19017, 31.66097, 23.56172, 29.61143, 23.88765, 22.49812, 24.86901, 17.29481, 18.09291, 
    15.34813, 14.77997, 13.87832, 12.88891, 16.20763, 16.29024, 15.29712, 14.97839, 12.1133, 
    14.24168, 12.53824, 15.19818, 11.70478, 15.83745, 10.03585, 9.307574, 12.868, 8.571671, 
    11.60415, 12.42772, 11.23627, 11.13198, 7.761117, 6.75825, 14.23375, 10.63876, 8.893581, 
    11.55398, 11.57221, 11.58347, 9.724857, 11.43854, 11.22636, 10.17015, 12.50765, 6.200494, 
    9.018902, 10.80557, 13.09591, 3.914033, 9.567723, 8.038338, 10.23096, 9.367358, 7.695937, 
    6.118552, 8.793192, 7.796682, 12.45064, 10.61601, 6.001, 6.765096, 8.764652, 4.586417, 
    8.390782, 7.209201, 10.01209, 7.327461, 6.525136, 2.840065, 10.32371, 4.790035, 8.376431, 
    6.26398, 2.705892, 8.362109, 8.983507, 3.362469, 1.182678, 4.875312]

    return (x0 = T[94.9, 0.009, 90.1, 113, 20, 73.8, 140, 20],
            obj = x -> gaussls(x, y), 
            grad! = (gradient, x) -> gaussls_gradient(gradient, x, y))
end